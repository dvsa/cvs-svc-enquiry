openapi: 3.0.0
info:
  description: >-
    This is the API spec for retrieving all defects. These defects will be
    stored locally on the VSAs mobile device. Authorization details will be
    updated once we have confirmed the security scheme we are using.
  version: 1.0.0
  title: Defect Microservice
  termsOfService: ""
  contact:
    email: mdclarke@deloitte.co.uk
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Defects
    description: Endpoints related to defects
    externalDocs:
      description: Find out more
      url: "https://wiki.i-env.net/display/HVT/Epic%3A+Add+a+defect"
paths:
  /defects:
    get:
      tags:
        - Defects
      summary: Return defects
      description: Return defects
      operationId: GetDefects
      security:
        - ${lambda_auth_name}: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: '${lambdas["get_defects"]}'
        passthroughBehavior: "when_no_match"
        timeoutInMillis: 29000
      responses:
        "200":
          description: All defects returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/imNumbers"
        "401":
          description: Not authenticated
        "403":
          description: Access token does not have the required scope
        "404":
          description: Defects not found

  /defects/iva:
    get:
      summary: Search the IVA defect manuals by Vehicle Type, EU Vehicle Category and Inspection type.
      tags:
        - IVA Defects
      parameters:
        - in: query
          name: vehicleType
          schema:
            $ref: "#/components/schemas/vehicleType"
        - in: query
          name: euVehicleCategory
          schema:
            $ref: "#/components/schemas/euVehicleCategory"
        - in: query
          name: inspectionType
          schema:
            $ref: "#/components/schemas/inspectionType"
      security:
        - ${lambda_auth_name}: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
      responses:
        "200":
          description: All defects for the query returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ivaDefects"
        "401":
          description: Not authenticated
        "403":
          description: Access token does not have the required scope
        "404":
          description: Defects not found

  /defects/iva/manual/{id}:
    get:
      summary: Search the IVA defect manuals by Manual ID.
      tags:
        - IVA Defects
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: Accept-version
          schema:
            type: string
          required: true
      security:
        - ${lambda_auth_name}: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
      responses:
        "200":
          description: All defects for the query returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ivaDefects"
        "401":
          description: Not authenticated
        "403":
          description: Access token does not have the required scope
        "404":
          description: Defects not found

components:
  securitySchemes:
    ${lambda_auth_name}:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: ${authorizerUri}
        authorizerCredentials: ${authorizerCredentials}
        authorizerResultTtlInSeconds: 0
        type: "token"
  schemas:
    deficiency:
      type: object
      properties:
        ref:
          type: string
        deficiencyId:
          type: string
          nullable: true
          pattern: "[a-z]"
          minLength: 1
          maxLength: 1
        deficiencySubId:
          type: string
          nullable: true
          pattern: "^[mdclxvi]+$"
        deficiencyCategory:
          type: string
          enum:
            - dangerous
            - major
            - minor
        deficiencyText:
          type: string
        stdForProhibition:
          type: boolean
        forVehicleType:
          type: array
          items:
            type: string
            enum:
              - psv
              - hgv
              - trl
    item:
      type: object
      properties:
        itemNumber:
          type: number
        itemDescription:
          type: string
        forVehicleType:
          type: array
          items:
            type: string
            enum:
              - psv
              - hgv
              - trl
        deficiencies:
          type: array
          items:
            $ref: "#/components/schemas/deficiency"
    psvAdditionalInfo:
      type: object
      properties:
        location:
          type: object
          properties:
            vertical:
              type: array
              nullable: true
              items:
                type: string
                enum:
                  - upper
                  - lower
            horizontal:
              type: array
              nullable: true
              items:
                type: string
                enum:
                  - inner
                  - outer
            lateral:
              type: array
              nullable: true
              items:
                type: string
                enum:
                  - nearside
                  - centre
                  - offside
            longitudinal:
              type: array
              nullable: true
              items:
                type: string
                enum:
                  - front
                  - rear
            rowNumber:
              type: array
              nullable: true
              items:
                type: number
                minimum: 1
                maximum: 20
            seatNumber:
              type: array
              nullable: true
              items:
                type: number
                minimum: 1
                maximum: 6
            axleNumber:
              type: array
              nullable: true
              items:
                type: number
                minimum: 1
                maximum: 10
        notes:
          type: boolean
    imNumber:
      type: object
      properties:
        imNumber:
          type: number
        imDescription:
          type: string
        forVehicleType:
          type: array
          items:
            type: string
            enum:
              - psv
              - hgv
              - trl
        additionalInfo:
          type: object
          properties:
            psv:
              $ref: "#/components/schemas/psvAdditionalInfo"
            hgv:
              type: object
              nullable: true
            trl:
              type: object
              nullable: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/item"
    imNumbers:
      type: array
      items:
        $ref: "#/components/schemas/imNumber"

    ivaDefects:
      type: array
      items:
        $ref: "#/components/schemas/ivaDefect"

    ivaDefect:
      type: object
      properties:
        sectionNumber:
          type: string
        sectionDescription:
          type: string
        vehicleTypes:
          type: array
          items:
            $ref: "#/components/schemas/vehicleType"
        euVehicleCategories:
          type: array
          items:
            $ref: "#/components/schemas/euVehicleCategory"
        requiredStandards:
          type: array
          items:
            $ref: "#/components/schemas/requiredStandard"

    requiredStandard:
      properties:
        rsNumber:
          type: integer
        requiredStandard:
          type: string
        refCalculation:
          type: number
        additionalInfo:
          type: boolean
          default: false
        inspectionTypes:
          type: array
          items:
            $ref: "#/components/schemas/inspectionType"

    vehicleType:
      type: string
      enum:
        - car
        - lgv
        - motorcycle
        - psv
        - hgv
        - trl

    euVehicleCategory:
      type: string
      enum:
        - m1
        - m2
        - m3
        - n1
        - n2
        - n3
        - o1
        - o2
        - o3
        - o4

    inspectionType:
      type: string
      enum:
        - basic
        - normal

servers:
  - url: "https://url/api/v1"
